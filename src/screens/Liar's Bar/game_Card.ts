import TelegramBot from 'node-telegram-bot-api';
import { InlineKeyboard } from '../../InlineKeyboard';
import { editMessage } from '../../Message';
import { CallbackAction, handleCallback, MessageScreen } from '../../CallbackHandler';
import { Button } from '../../Button';
import GameModel from '../../models/Game';
import { getPlayerName } from '../../functoins/userFL';
import { startScreen } from '../start';
import RoomModel from '../../models/Room';
import { RandomNumber, WaitForMilliseconds } from '../../functoins/globalFL';

const max_players_in_game: number = 4;

export async function initializeGame(room: any, bot: TelegramBot) {
  let cards: string[] = ["ü§°", "ü§°"];
  for (let _ = 0; _ < 6; _++) {
    cards.push("A");
    cards.push("K");
    cards.push("Q");
  }
  const deck = shuffleDeck(cards);

  const table = shuffleDeck(["A", "K", "Q"])[0];

  const players = room.players.map((chatId: number, index: number) => ({
    chatId,
    hand: index < max_players_in_game ? deck.splice(0, 5) : [], // –†–∞–∑–¥–∞–µ–º –ø–æ 5 –∫–∞—Ä—Ç
    loseCount: 0,
    spectator: index < max_players_in_game ? false : true,
    order: index < max_players_in_game ? index : -1,
  }));

  const game = new GameModel({
    roomCode: room.code,
    table,
    deck, // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã
    players,
    currentPlayerIndex: 0, // –ü–µ—Ä–≤—ã–π —Ö–æ–¥ —É –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  });

  await game.save();
}

function shuffleDeck(deck: string[]): string[] {
  return deck.sort(() => Math.random() - 0.5);
}

const tableNames = {
  "A": "–¢—É–∑–æ–≤",
  "K": "–ö–æ—Ä–æ–ª–µ–π",
  "Q": "–î–∞–º"
};

export default async function gameLiarsBarCard(messageScreen: MessageScreen) {
  const bot = messageScreen.bot;
  const chatId = messageScreen.chatId;

  const game = await GameModel.findOne({ roomCode: messageScreen.data?.code });
  if (!game) throw new Error("Game not found.");

  const currentPlayer = game.players.filter((p) => p.spectator === false)[game.currentPlayerIndex];
  const playerData = game.players.find((p) => p.chatId === chatId);

  if (!playerData) throw new Error("Player not found in this game.");

  const myTurn = currentPlayer.chatId === chatId;
  const cards: Button[] = [];

  playerData.hand.forEach((card, index) => {
    cards.push({
      text: card,
      callback_data: `select_card_${index}`,
      data: { selected: false },
    });
  });

  const inlineKeyboard = new InlineKeyboard();

  inlineKeyboard.addRow(cards);
  if (myTurn) {
    inlineKeyboard.addRow([{text: "–ë—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—ã", callback_data: "send_cards", data: {}}]);
    inlineKeyboard.addRow([{text: "–õ–ñ–Å–®–¨", callback_data: "say_liar", data: {}}]);
  }

  const playerList = await Promise.all(game.players.map(async player => {
    return { 
      name: await getPlayerName(bot, player.chatId), 
      id: player.chatId, 
      loseCount: player.loseCount,
      spectator: player.spectator,
    }
  }));
  const playerListText = playerList
  .map(player => {
    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫, –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ —Å –ø–æ–º–æ—â—å—é —ç–º–æ–¥–∑–∏
    const isCurrentPlayer = player.id === currentPlayer.chatId;
    return isCurrentPlayer
      ? `‚ñ∂Ô∏è *${player.name} \\(${player.loseCount} : 6\\)*`
      : `‚¨úÔ∏è ${player.spectator ? "~" : ""}${player.name} \\(${player.loseCount} : 6\\)${player.spectator ? "~" : ""}`;
  })
  .join("\n");

  const playedCards = game.turnHistory.at(-1);
  const playedCardsText = playedCards 
                          ? `*${await getPlayerName(bot, playedCards.playerId)}* \\- ${game.table} *x${playedCards.playedCards.length}*\n`
                          : ""
  
  const screenText = `
üé≤ –°—Ç–æ–ª *${tableNames[game.table]}* üé≤
${playedCardsText}
üéÆ *–ò–≥—Ä–æ–∫–∏*:
${playerListText}

  `;
  const nextScreen = await editMessage(messageScreen, screenText, inlineKeyboard, 'MarkdownV2');

  const actions: CallbackAction[] = [];
  for (let i = 0; i < inlineKeyboard.keyboard[0].length; i++) {
    actions.push({button: inlineKeyboard.keyboard[0][i], nextScreenCallback: async () => {
      cards[i].data = {...cards[i].data, selected: !cards[i].data?.selected};
      cards[i].text = cards[i].data?.selected 
                      ? `üî∏${cards[i].text}`
                      : cards[i].text.replace("üî∏", "");
      inlineKeyboard.updateRow(0, cards);
      await editMessage(nextScreen, screenText, inlineKeyboard, 'MarkdownV2');
    }});
  }
  if (myTurn) {
    actions.push(
      {
        button: inlineKeyboard.keyboard[1][0], 
        nextScreenCallback: async () => {
          // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
          const selectedCards = cards.filter((card) => card.data?.selected);

          if (selectedCards.length === 0) {
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await editMessage(nextScreen, screenText + "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–¥ –±—Ä–æ—Å–∫–æ–º\\!", inlineKeyboard, 'MarkdownV2');
            return;
          }
    
          // –£–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
          playerData.hand = playerData.hand.filter(
            (card, index) => {
              return cards[index].text === card;
            }
          );
    
          // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –Ω–∞ —Å—Ç–æ–ª
          game.turnHistory.push({playerId: chatId, playedCards: selectedCards.map((card) => card.text.replace("üî∏", ""))});
    
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
          await game.save();
    
          // –ü–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
          game.currentPlayerIndex = (game.currentPlayerIndex + 1) % game.players.filter((p) => p.spectator === false).length;
          await game.save();

          bot.emit("screen_update");
        }
      },
      {button: inlineKeyboard.keyboard[2][0], nextScreenCallback: async () => {
        if (game.turnHistory.length === 0) {
          await editMessage(nextScreen, screenText + "–î–æ –≤–∞—Å –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ —Ö–æ–¥–∏–ª\\!", inlineKeyboard, 'MarkdownV2');
          return;
        }
        const lastTurn = game.turnHistory.at(-1);
        if (!lastTurn) return;

        game.liarCall = {
          accusedId: lastTurn.playerId, // –û–±–≤–∏–Ω—è–µ–º—ã–π ‚Äî —Ç–æ—Ç, –∫—Ç–æ —Å–¥–µ–ª–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
          accuserId: messageScreen.chatId, // –û–±–≤–∏–Ω–∏—Ç–µ–ª—å ‚Äî —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
        };
  
        await game.save();
  
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ
        const accusedName = await getPlayerName(bot, game.liarCall.accusedId);
        const accuserName = await getPlayerName(bot, game.liarCall.accuserId);
  
        const liarCallText = `
üö® *–û–±–≤–∏–Ω–µ–Ω–∏–µ –≤ –æ–±–º–∞–Ω–µ*\\! üö®

üë§ *${accuserName}* —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ *${accusedName}* –æ–±–º–∞–Ω—É–ª\\.

ü§î –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã ${accusedName}\\.\\.\\. 
`;
        bot.emit('liar_event', { liarCallText: liarCallText });
        await WaitForMilliseconds(3000); // –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã
  
        let loserId: number;
        let loserName: string;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã –æ–±–≤–∏–Ω—è–µ–º–æ–≥–æ
        const accusedCardsAreValid = lastTurn.playedCards.every(card => card === game.table || card === 'ü§°');
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        if (accusedCardsAreValid) {
          const failText = `
‚ùå *${accuserName}* –æ—à–∏–±—Å—è\\! –ö–∞—Ä—Ç—ã ${accusedName} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª—É\\.

üôÖ‚Äç‚ôÇÔ∏è *${accuserName}* –∏—Å–ø—ã—Ç–∞–µ—Ç —É–¥–∞—á—É –æ—Å—Ç–∞—Ç—å—Å—è –≤ –∏–≥—Ä–µ\\.
          `;
          loserId = game.liarCall.accuserId;
          loserName = accuserName;
          bot.emit('liar_event', { resultText: failText });
          await WaitForMilliseconds(3000);
        } else {
          const successText = `
‚úÖ *${accusedName}* –æ–±–º–∞–Ω—É–ª\\! –ö–∞—Ä—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª—É\\.

üôÖ‚Äç‚ôÇÔ∏è *${accusedName}* –∏—Å–ø—ã—Ç–∞–µ—Ç —É–¥–∞—á—É –æ—Å—Ç–∞—Ç—å—Å—è –≤ –∏–≥—Ä–µ\\.
          `;
          loserId = game.liarCall.accusedId;
          loserName = accusedName;
          bot.emit('liar_event', { resultText: successText });
          await WaitForMilliseconds(3000);
        }

        const loserPlayer = game.players.find((p) => p.chatId === loserId);
        if (!loserPlayer) return;

        let luckText: string;
        if (RandomNumber(1, 6) > ++loserPlayer.loseCount) {
          luckText = `
üçÄ –£–°–ü–ï–•\\!\\!\\! üçÄ

–ò–≥—Ä–æ–∫ *${loserName}* –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–µ\\.
–û–Ω –ø–æ—Ç—Ä–∞—Ç–∏–ª –ø–æ–ø—ã—Ç–æ–∫: ${loserPlayer.loseCount} –∏–∑ 6
          `
        } else {
          luckText = `
üòû –ù–µ—É–¥–∞—á–∞\\.\\.\\.

–ò–≥—Ä–æ–∫ *${loserName}* —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–º\\.
–û–Ω –ø–æ—Ç—Ä–∞—Ç–∏–ª –ø–æ–ø—ã—Ç–æ–∫: ${loserPlayer.loseCount} –∏–∑ 6
          `
          loserPlayer.spectator = true;
        }
        game.save();

        const playersInGame = game.players.filter((p) => p.spectator === false)
        const isLastPlayerLeft = playersInGame.length < 2;

        bot.emit('liar_event', { luckText: luckText, isLast: isLastPlayerLeft });
        await WaitForMilliseconds(3000);

        if (isLastPlayerLeft) {
          const winnerName = await getPlayerName(messageScreen.bot, playersInGame[0].chatId);
          const finalText = `
–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\\.
–ü–æ–±–µ–¥–∏—Ç–µ–ª—å *${winnerName}*
          `
          bot.emit('liar_event', { finalText: finalText });
          await GameModel.deleteOne({ roomCode: messageScreen.data?.code })
          await RoomModel.deleteOne({ code: messageScreen.data?.code })
        } else {
          resetTable(game);
          await game.save();
        }
      }}
    )
  }
  
  function resetTable(game: any) {
    let cards: string[] = ["ü§°", "ü§°"];
    for (let _ = 0; _ < 6; _++) {
      cards.push("A");
      cards.push("K");
      cards.push("Q");
    }
    const deck = shuffleDeck(cards);

    const table = shuffleDeck(["A", "K", "Q"])[0];

    let index: number = 0;
    const players = game.players.map((player: any) => {
      player = {
        ...player, 
        order: player.spectator ? -1 : index++,
        hand: player.spectator ? [] : deck.splice(0, 5)
      };
      return player;
    });

    const playersInGame: number = game.players.filter((p: any) => p.spectator === false).length;
    const currentPlayer: number = RandomNumber(0, playersInGame - 1);

    game.turnHistory = undefined;
    game.table = table;
    game.deck = deck;
    game.players = players;
    game.currentPlayerIndex = currentPlayer;
  }

  const screenUpdate = () => {
    bot.removeListener('screen_update', screenUpdate);
    bot.removeListener('callback_query', callbackHandler);
    bot.removeListener('liar_event', liarEvent);
    gameLiarsBarCard(nextScreen);
  }

  const liarEvent = async (callback_data: any) => {
    bot.removeListener('screen_update', screenUpdate);
    bot.removeListener('callback_query', callbackHandler);

    const { 
      liarCallText, 
      resultText, 
      luckText,
      isLast,
      finalText } = callback_data
    if (liarCallText) {
      await editMessage(nextScreen, liarCallText, new InlineKeyboard(), 'MarkdownV2');
    }
    if (resultText) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø–∞—É–∑—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await editMessage(nextScreen, resultText, new InlineKeyboard(), 'MarkdownV2');
    }
    if (luckText) {
      await editMessage(nextScreen, luckText, new InlineKeyboard(), 'MarkdownV2');
      
      if (!isLast) {
        await WaitForMilliseconds(3000);
        await editMessage(nextScreen, '–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª', new InlineKeyboard(), 'MarkdownV2');
        await WaitForMilliseconds(3000);
        bot.removeListener('liar_event', liarEvent);
        gameLiarsBarCard(nextScreen);
      }
    }
    if (finalText) {
      await editMessage(nextScreen, finalText, new InlineKeyboard(), 'MarkdownV2');
      // –ï—â—ë –æ–¥–Ω–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
      await WaitForMilliseconds(3000);
      bot.removeListener('liar_event', liarEvent);
      startScreen({ ...nextScreen, fromScreen: [] });
    }
  }
  
  function callbackHandler(callbackQuery: TelegramBot.CallbackQuery) {
    handleCallback(nextScreen, callbackQuery, actions, callbackHandler, undefined, false);
  }

  bot.on('callback_query', callbackHandler);
  bot.on('screen_update', screenUpdate);
  bot.on('liar_event', liarEvent);
}

async function throwDice(messageScreen: MessageScreen) {
  const bot = messageScreen.bot;
  const chatId = messageScreen.chatId;
  const dice = await bot.sendDice(chatId);
}